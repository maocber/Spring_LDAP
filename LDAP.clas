package co.com.periferia.alfa.core.services.impl;

import java.util.Hashtable;
import java.util.Properties;

import javax.naming.AuthenticationException;
import javax.naming.Context;
import javax.naming.NameNotFoundException;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.SizeLimitExceededException;
import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;
import co.com.periferia.alfa.core.ldap.src.app.ActiveDirectoryHelper;
import co.com.periferia.alfa.core.model.DatosDelcopModel;
import co.com.periferia.alfa.core.repository.DatosDelcopRepository;
import co.com.periferia.alfa.core.services.LdapService;

@Component
public class LdapServiceImpl  implements LdapService {
	

	@Autowired
	ActiveDirectoryHelper ldap;
	
	@Autowired
	DatosDelcopRepository datosDelcopRepository;
	
	public boolean newldap(String user, String pass) throws NamingException {
		// service user DistinguisedName
		String serviceUserDN = "CN=USUARIO_ADMIN,OU=Grupo1,OU=Grupo2,OU=Grupo3,OU=Grupo4,DC=base1,DC=base2";
	    String serviceUserPassword = "PASWORD";

	    // user to authenticate
	    String identifyingAttribute = "SamAccountName"; //uid sn
	    String identifier = user; // usuario qwue se debe buscar en LDAP 
	    String password = pass; // Password del usuario a buscar
	    String base = "DC=base1,DC=base2";
			
	       // LDAP connection info
	       String ldap = URL_SERVER_LDAP;
	       int port = PORT_SERVER_LDAP;
	       String ldapUrl = "ldap://" + ldap + ":" + port;

	       // first create the service context
	       DirContext serviceCtx = null;
	       try {
	           // use the service user to authenticate
	           Properties serviceEnv = new Properties();
	           serviceEnv.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
	           serviceEnv.put(Context.PROVIDER_URL, ldapUrl);
	           serviceEnv.put(Context.SECURITY_AUTHENTICATION, "simple");
	           serviceEnv.put(Context.SECURITY_PRINCIPAL, serviceUserDN);
	           serviceEnv.put(Context.SECURITY_CREDENTIALS, serviceUserPassword);
	           serviceCtx = new InitialDirContext(serviceEnv);

	           // we don't need all attributes, just let it get the identifying one
	           String[] attributeFilter = { identifyingAttribute };
	           SearchControls sc = new SearchControls();
	           sc.setReturningAttributes(attributeFilter);
	           sc.setSearchScope(SearchControls.SUBTREE_SCOPE);

	           // use a search filter to find only the user we want to authenticate
	           String searchFilter = "(" + identifyingAttribute + "=" + identifier + ")";
	           NamingEnumeration<SearchResult> results = serviceCtx.search(base, searchFilter, sc);

	           if (results.hasMore()) {
	               // get the users DN (distinguishedName) from the result
	               SearchResult result = results.next();
	               String distinguishedName = result.getNameInNamespace();
	               System.out.println("Dist Name: " + distinguishedName);

	               // attempt another authentication, now with the user
	               Properties authEnv = new Properties();
	               authEnv.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
	               authEnv.put(Context.PROVIDER_URL, ldapUrl);
	               authEnv.put(Context.SECURITY_PRINCIPAL, distinguishedName);
	               authEnv.put(Context.SECURITY_CREDENTIALS, password);
	               new InitialDirContext(authEnv);

	               System.out.println("Authentication successful");
	               return true;
	           }
	       } catch (Exception e) {
	           e.printStackTrace();
	       } finally {
	           if (serviceCtx != null) {
	               try {
	                   serviceCtx.close();
	               } catch (NamingException e) {
	                   e.printStackTrace();
	               }
	           }
	       }
	       System.err.println("Authentication failed");
	       return false;
	}
}
